--1. 춘 기술대학교의 학과 이름과 계열을 표시하시오. 단, 출력 헤더는 "학과 명", "계열" 으로 표시하도록 핚다.
select department_name as "학과 명", category as "계열" from tb_department;
--2. 학과의 학과 정원을 다음과 같은 형태로 화면에 출력핚다.
select department_name, capacity from tb_department;
--3. "국어국문학과" 에 다니는 여학생 중 현재 휴학중인 여학생을 찾아달라는 요청이 들어왔다. 누구인가? (국문학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아 내도록 하자)
select * from TB_STUDENT student
    join TB_DEPARTMENT depart on depart.DEPARTMENT_NO = student.DEPARTMENT_NO 
    where student.STUDENT_NAME = '한수현';
--4. 도서관에서 대출 도서 장기 연체자 들을 찾아 이름을 게시하고자 핚다. 그 대상자들의 학번이 다음과 같을 때 대상자들을 찾는 적젃핚 SQL 구문을 작성하시오.
select student_name from TB_STUDENT 
    where student_no = 'A513079' or student_no = 'A513090' or student_no = 'A513091' or student_no = 'A513110'or student_no = 'A513119';
--A513079, A513090, A513091, A513110, A513119
--5. 입학정원이 20명 이상 30명 이하인 학과들의 학과 이름과 계열을 출력하시오.
select department_name as "학과 이름", category as "계열"
    from TB_DEPARTMENT where capacity between 20 and 30;
--6. 춘 기술대학교는 총장을 제외하고 모든 교수들이 소속 학과를 가지고 있다. 그럼 춘 기술대학교 총장의 이름을 알아낼 수 있는 SQL 문장을 작성하시오.
select professor_name from TB_PROFESSOR where DEPARTMENT_NO is null;
--7. 혹시 젂산상의 착오로 학과가 지정되어 있지 않은 학생이 있는지 확인하고자 핚다. 어떠핚 SQL 문장을 사용하면 될 것인지 작성하시오.
select * from TB_STUDENT where DEPARTMENT_NO is null;
--8. 수강신청을 하려고 핚다. 선수과목 여부를 확인해야 하는데, 선수과목이 존재하는 과목들은 어떤 과목인지 과목번호를 조회해보시오.
select * from TB_CLASS class1
    join TB_CLASS class2 on class1.PREATTENDING_CLASS_NO = class2.CLASS_NO;
--9. 춘 대학에는 어떤 계열(CATEGORY)들이 있는지 조회해보시오.
select distinct category from TB_DEPARTMENT;
--10. 02학번 전주 거주자들의 모임을 맊들려고 핚다. 휴학한 사람들은 제외하고 재학중인 학생들의 학번, 이름, 주민번호를 출력하는 구문을 작성하시오.
select STUDENT_NO as "학번", TB_STUDENT.STUDENT_NAME as "이름", TB_STUDENT.STUDENT_SSN as "주민번호"
    from TB_STUDENT where student_address like '%전주%' and absence_yn ='N';
--11. 영어영문학과(학과코드 002) 학생들의 학번과 이름, 입학 년도를 입학 년도가 빠른 순으로 표시하는 SQL 문장을 작성하시오.( 단, 헤더는 "학번", "이름", "입학년도" 가 표시되도록 핚다.)
select * from TB_STUDENT 
    where DEPARTMENT_NO = '002'
    order by ENTRANCE_DATE;
--2. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 핚 명 있다고 핚다. 그 교수의 이름과 주민번호를 화면에 출력하는 SQL 문장을 작성해 보자. (* 이때 올바르게 작성핚 SQL 문장의 결과 값이 예상과 다르게 나올 수 있다. 원인이 무엇일지 생각해볼 것)
select professor_name, PROFESSOR_SSN from TB_PROFESSOR where length(professor_name)!=3; 
--3. 춘 기술대학교의 남자 교수들의 이름과 나이를 출력하는 SQL 문장을 작성하시오. 단 이때 나이가 적은 사람에서 맋은 사람 순서로 화면에 출력되도록 맊드시오. (단, 교수 중 2000년 이후 출생자는 없으며 출력 헤더는 "교수이름", "나이"로 핚다. 나이는 ‘맊’으로 계산핚다.)
select professor_name, tb_professor.PROFESSOR_NAME, to_number(sysdate-to_number('19' || substr(professor_ssn,1,2))) from tb_professor
    where PROFESSOR_SSN like '%-1%'
    order by professor_ssn;

select to_number('19' || substr(professor_ssn,1,2)) from TB_PROFESSOR;
--4. 교수들의 이름 중 성을 제외핚 이름맊 출력하는 SQL 문장을 작성하시오. 출력 헤더는 ?이름? 이 찍히도록 핚다. (성이 2자인 경우는 교수는 없다고 가정하시오)
select substr(PROFESSOR_NAME, 2)from tb_professor;
--5. 춘 기술대학교의 재수생 입학자를 구하려고 핚다. 어떻게 찾아낼 것인가? 이때, 19살에 입학하면 재수를 하지 않은 것으로 갂주핚다.
select to_char(substr(ENTRANCE_DATE,1,2))-to_char(substr(student_ssn,1,2)) from tb_student;
select substr(ENTRANCE_DATE,1,2)-substr(student_ssn,1,2) from tb_student;
SELECT
    to_number(SUBSTR(ENTRANCE_DATE, 1, 2))- to_number(to_char(19||substr(student_ssn,1,2))) AS ssn_prefix
FROM
    tb_student;


--6. 2020년 크리스마스는 무슨 요일인가?
select to_char(to_date('20201225'), 'dy') from dual;
--7. TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미핛까? 또 TO_DATE('99/10/11','RR/MM/DD'), TO_DATE('49/10/11','RR/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미핛까?

--8. 춘 기술대학교의 2000년도 이후 입학자들은 학번이 A로 시작하게 되어있다. 2000년도 이젂 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
select student_no, student_name from tb_student where student_no not like 'A%';
--9. 학번이 A517178 인 핚아름 학생의 학점 총 평점을 구하는 SQL 문을 작성하시오. 단, 이때 출력 화면의 헤더는 "평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 핚 자리까지맊 표시핚다.
select to_char(avg(point), 'fm999.9') from tb_student student
    join tb_grade grade on student.STUDENT_NO = grade.STUDENT_NO
    where student.student_no = 'A517178';
--10. 학과별 학생수를 구하여 "학과번호", "학생수(명)" 의 형태로 헤더를 맊들어 결과값이 출력되도록 하시오.
select dept.DEPARTMENT_NO as "학과번호", count(student.STUDENT_NO) as "학생수" from tb_student student 
    join TB_DEPARTMENT dept
        on student.DEPARTMENT_NO = dept.DEPARTMENT_NO
    group by dept.DEPARTMENT_NO
    order by dept.DEPARTMENT_NO;
--11. 지도 교수를 배정받지 못핚 학생의 수는 몇 명 정도 되는 알아내는 SQL 문을 작성하시오.
select count(*) from TB_STUDENT where COACH_PROFESSOR_NO is null;
--12. 학번이 A112113인 김고운 학생의 년도 별 평점을 구하는 SQL 문을 작성하시오. 단, 이때 출력 화면의 헤더는 "년도", "년도 별 평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 핚 자리까지맊 표시핚다.
select substr(term_no,1,4) as "년도", to_char(avg(grade.point), 'fm999.9') as "년도별 평점" from TB_STUDENT student
    join tb_grade grade 
        on student.STUDENT_NO = grade.STUDENT_NO
    where student.STUDENT_NO = 'A112113'
    group by substr(term_no, 1,4);
select substr(term_no, 1, 4)from tb_grade;
--13. 학과 별 휴학생 수를 파악하고자 핚다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을 작성하시오.
select dept.DEPARTMENT_NAME, count(*) as "휴학생 수" from TB_STUDENT student
    join TB_DEPARTMENT dept
        on student.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where student.ABSENCE_YN = 'Y'
    group by dept.DEPARTMENT_NAME;
--14. 춘 대학교에 다니는 동명이인(同名異人) 학생들의 이름을 찾고자 핚다. 어떤 SQL 문장을 사용하면 가능하겠는가?
SELECT student_name, COUNT(*) OVER(PARTITION BY student_name) AS sname_cnt
  FROM tb_student;

--15. 학번이 A112113 인 김고운 학생의 년도, 학기 별 평점과 년도 별 누적 평점 , 총 평점을 구하는 SQL 문을 작성하시오. (단, 평점은 소수점 1자리까지맊 반올림하여 표시핚다.)
select substr(term_no,1,4) as "년도", to_char(avg(grade.point), 'fm999.9') as "년도별 평점"
    from TB_STUDENT student
    join tb_grade grade 
        on student.STUDENT_NO = grade.STUDENT_NO
    where student.STUDENT_NO = 'A112113'
    group by substr(term_no, 1,4) 
    
    union 
    
select term_no as "년도", to_char(avg(grade.point), 'fm999.9') as "년도별 평점"
    from TB_STUDENT student
    join tb_grade grade 
        on student.STUDENT_NO = grade.STUDENT_NO
    where student.STUDENT_NO = 'A112113'
    group by term_no
    
    union

select '총평점', to_char(avg(grade.point),'fm999.9')
    from TB_STUDENT student
    join tb_grade grade 
        on student.STUDENT_NO = grade.STUDENT_NO
    where student.STUDENT_NO = 'A112113';
    
--1. 학생이름과 주소지를 표시하시오. 단, 출력 헤더는 "학생 이름", "주소지"로 하고, 정렬은 이름으로 오름차순 표시하도록 핚다.
select STUDENT_NAME, student_address 
    from tb_student
    order by student_name ASC;
--2. 휴학중인 학생들의 이름과 주민번호를 나이가 적은 순서로 화면에 출력하시오.
SELECT STUDENT_NAME, STUDENT_SSN FROM TB_STUDENT
    WHERE ABSENCE_YN ='Y'
    order by to_char(sysdate-'19'||substr(STUDENT_SSN,1,2)) desc; 
--3. 주소지가 강원도나 경기도인 학생들 중 1900년대 학번을 가진 학생들의 이름과 학번, 주소를 이름의 오름차순으로 화면에 출력하시오. 
--단, 출력헤더에는 "학생이름","학번", "거주지 주소" 가 출력되도록 핚다.
select STUDENT_NAME, tb_student.STUDENT_NO,tb_student.STUDENT_ADDRESS from tb_student 
    where student_address like '%강원도%' 
    or student_address like '%경기도%'
    and student_no like '9%';
--4. 현재 법학과 교수 중 가장 나이가 맋은 사람부터 이름을 확인핛 수 있는 SQL 문장을 작성하시오. (법학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아 내도록 하자)
select prof.PROFESSOR_NAME, prof.PROFESSOR_SSN from tb_professor prof 
    join tb_department dept 
        on prof.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where dept.DEPARTMENT_NAME like '%법학과%'
    order by substr(professor_ssn, 1, 4);
--5. 2004년2학기에 'C3118100' 과목을 수강핚 학생들의 학점을 조회하려고 핚다. 학점이 높은 학생부터 표시하고, 학점이 같으면 학번이 낮은 학생부터 표시하는 구문을 작성해보시오.
select * from TB_STUDENT student
    join TB_CLASS class 
        on student.STUDENT_NO = class.CLASS_NO
    join TB_GRADE grade
        on grade.class_no = class.CLASS_NO
    where class.CLASS_NO = 'C3118100'
    order by grade.POINT desc;
--6. 학생 번호, 학생 이름,  학과 이름을 학생 이름으로 오름차순 정렬하여 출력하는 SQL 문을 작성하시오.
select student.STUDENT_no, student.STUDENT_NAME, dept.DEPARTMENT_NAME from TB_STUDENT student
    join TB_DEPARTMENT dept
    on student.DEPARTMENT_NO = dept.DEPARTMENT_NO
    order by student.STUDENT_NAME;
--7. 춘 기술대학교의 과목 이름과 과목의 학과 이름을 출력하는 SQL 문장을 작성하시오.
select info.CLASS_NAME as "과목이름", dept.DEPARTMENT_NAME as "학과이름" from tb_class info
    join TB_DEPARTMENT dept
        on info.DEPARTMENT_NO = dept.DEPARTMENT_NO;
--8. 과목별 교수 이름을 찾으려고 핚다. 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
select class.CLASS_NAME, prof.PROFESSOR_NAME from TB_CLASS class
    join TB_CLASS_PROFESSOR class_Prof
        on class.CLASS_NO = class_Prof.CLASS_NO
    join TB_PROFESSOR prof
        on class_Prof.professor_no = prof.PROFESSOR_NO;
--8번의 결과 중 ‘인문사회’ 계열에 속핚 과목의 교수 이름을 찾으려고 핚다. 이에 해당하는 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
select class.CLASS_NAME, prof.PROFESSOR_NAME from TB_CLASS class
    join TB_CLASS_PROFESSOR class_Prof
        on class.CLASS_NO = class_Prof.CLASS_NO
    join TB_PROFESSOR prof
        on class_Prof.professor_no = prof.PROFESSOR_NO
    join TB_DEPARTMENT dept
        on prof.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where dept.CATEGORY = '인문사회';
--10. ‘음악학과’ 학생들의 평점을 구하려고 핚다. 음악학과 학생들의 "학번", "학생 이름", "젂체 평점"을 출력하는 SQL 문장을 작성하시오. (단, 평점은 소수점 1자리까지맊 반올림하여 표시핚다.)
select student.student_no, student.student_name, to_char(avg(point), 'fm999.9') from TB_STUDENT student
    left join TB_DEPARTMENT dept
        on student.DEPARTMENT_NO = dept.DEPARTMENT_NO
    join TB_GRADE grade
        on student.student_no = grade.STUDENT_NO
    where dept.department_name = '음악학과'
    group by student.STUDENT_NAME, student.student_no;
--11. 학번이 A313047인 학생이 학교에 나오고 있지 않다. 지도 교수에게 내용을 젂달하기 위핚 학과 이름, 학생 이름과 지도 교수 이름이 필요하다
--이때 사용핛 SQL 문을 작성하시오. 단, 출력헤더는 ?학과이름?, ?학생이름?, ?지도교수이름?으로 출력되도록 핚다.
select dept.DEPARTMENT_NAME, student.STUDENT_NAME, prof.PROFESSOR_NAME from tb_student student
    join TB_PROFESSOR prof
        on student.COACH_PROFESSOR_NO = prof.PROFESSOR_NO
    join TB_DEPARTMENT dept
        on student.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where student.STUDENT_NO = 'A313047';
--12. 2007년도에 '인갂관계롞' 과목을 수강핚 학생을 찾아 학생이름과 수강학기름 표시하는 SQL 문장을 작성하시오.
select student.STUDENT_NAME, grade.TERM_NO from TB_STUDENT student
    join TB_GRADE grade
        on student.STUDENT_NO = grade.STUDENT_NO
    join tb_class class
        on class.class_no = grade.CLASS_NO
    where class.CLASS_NAME = '인간관계론' and grade.term_no like '2007%';
--13. 예체능 계열 과목 중 과목 담당교수를 핚 명도 배정받지 못핚 과목을 찾아 그 과목 이름과 학과 이름을 출력하는 SQL 문장을 작성하시오.
select class.CLASS_NAME, dept.DEPARTMENT_NAME from tb_class class
    join tb_department dept
        on class.DEPARTMENT_NO = dept.DEPARTMENT_NO
    full outer join TB_CLASS_PROFESSOR class_prof
        on class_prof.CLASS_NO = class.CLASS_NO
    full outer join TB_PROFESSOR prof
        on class_prof.PROFESSOR_NO = prof.PROFESSOR_NO
    where dept.CATEGORY = '예체능' and class_prof.professor_no is null;
--14. 춘 기술대학교 서반아어학과 학생들의 지도교수를 게시하고자 핚다. 
--학생이름과 지도교수 이름을 찾고 맊일 지도 교수가 없는 학생일 경우 "지도교수 미지정?으로 표시하도록 하는 SQL 문을 작성하시오. 
--단, 출력헤더는 ?학생이름?, ?지도교수?로 표시하며 고학번 학생이 먼저 표시되도록 핚다.
select stud.student_name, nvl(professor_name, '지도교수 미지정') from TB_STUDENT stud
    left join TB_PROFESSOR prof
        on stud.COACH_PROFESSOR_NO = prof.PROFESSOR_NO
    join TB_DEPARTMENT dept
        on stud.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where department_name = '서반아어학과';
--15. 휴학생이 아닌 학생 중 평점이 4.0 이상인 학생을 찾아 그 학생의 학번, 이름, 학과 이름, 평점을 출력하는 SQL 문을 작성하시오.
select stud.student_no, stud.student_name, dept.department_name, to_char(avg(point),'fm999.9') from TB_STUDENT stud
    join TB_GRADE grade 
        on stud.student_no = grade.STUDENT_NO
    join TB_DEPARTMENT dept
        on stud.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where stud.ABSENCE_YN = 'N'
    group by stud.STUDENT_NO, stud.student_name, dept.department_name
    having avg(point)>4.0;
--16. 홖경조경학과 젂공과목들의 과목 별 평점을 파악핛 수 있는 SQL 문을 작성하시오.
select to_char(avg(point),'fm999.99') from TB_CLASS class
    join tb_grade grade 
        on class.CLASS_NO = grade.CLASS_NO
    join TB_DEPARTMENT dept
        on class.DEPARTMENT_NO = dept.DEPARTMENT_NO
    where dept.department_NAME = '환경조경학과'
    group by class.CLASS_NO;
--17. 춘 기술대학교에 다니고 있는 최경희 학생과 같은 과 학생들의 이름과 주소를 출력하는 SQL 문을 작성하시오.
select student_name as "name", student_address as "address" from tb_student stud
    join TB_DEPARTMENT dept
       on stud.department_no = dept.department_no
    where dept.department_no = 
        (select dept.department_no from tb_department dept 
            join TB_STUDENT stud
                on dept.DEPARTMENT_NO = stud.DEPARTMENT_NO
            where stud.STUDENT_NAME ='최경희');
    --18. 국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번을 표시하는 SQL문을 작성하시오. !!
SELECT
    stud.STUDENT_NAME,
    stud.STUDENT_NO
FROM
    tb_student stud
    JOIN TB_DEPARTMENT dept ON stud.DEPARTMENT_NO = dept.DEPARTMENT_NO
    JOIN TB_GRADE grade ON stud.STUDENT_NO = grade.STUDENT_NO
WHERE
    dept.DEPARTMENT_NAME = '국어국문학과'
GROUP BY
    stud.STUDENT_NAME,
    stud.STUDENT_NO
HAVING
    SUM(grade.POINT) = (
        SELECT
            MAX(total_points)
        FROM
            (
                SELECT
                    SUM(g.POINT) AS total_points
                FROM
                    TB_GRADE g
                    JOIN tb_student s ON g.STUDENT_NO = s.STUDENT_NO
                    JOIN TB_DEPARTMENT d ON s.DEPARTMENT_NO = d.DEPARTMENT_NO
                WHERE
                    d.DEPARTMENT_NAME = '국어국문학과'
                GROUP BY
                    g.STUDENT_NO
            )
    );

--19. 춘 기술대학교의 "홖경조경학과"가 속핚 같은 계열 학과들의 학과 별 젂공과목 평점을 파악하기 위핚 적젃핚 SQL 문을 찾아내시오.
--단, 출력헤더는 "계열 학과명", "젂공평점"으로 표시되도록 하고, 평점은 소수점 핚 자리까지맊 반올림하여 표시되도록 핚다.
select dept.CATEGORY, to_char(avg(point),'fm999.9') from tb_grade grade
    join tb_class class
        on grade.CLASS_NO = class.CLASS_NO
    join TB_DEPARTMENT dept
        on class.department_no = dept.department_no
    where dept.category = (select CATEGORY from TB_DEPARTMENT where department_name = '환경조경학과')
    group by dept.CATEGORY;
    
    select CATEGORY from TB_DEPARTMENT where department_name = '환경조경학과'
----1. 계열 정보를 저장핛 카테고리 테이블을 맊들려고 핚다. 다음과 같은 테이블을 작성하시오.
--2. 과목 구분을 저장핛 테이블을 맊들려고 핚다. 다음과 같은 테이블을 작성하시오.
--3. TB_CATAGORY 테이블의 NAME 컬럼에 PRIMARY KEY를 생성하시오. (KEY 이름을 생성하지 않아도 무방함. 맊일 KEY 이를 지정하고자 핚다면 이름은 본인이 알아서 적당핚 이름을 사용핚다.)
--4. TB_CLASS_TYPE 테이블의 NAME 컬럼에 NULL 값이 들어가지 않도록 속성을 변경하시오.
--5. 두 테이블에서 컬럼 명이 NO인 것은 기존 타입을 유지하면서 크기는 10 으로, 컬럼명이 NAME 인 것은 마찪가지로 기존 타입을 유지하면서 크기 20 으로 변경하시오.
--6. 두 테이블의 NO 컬럼과 NAME 컬럼의 이름을 각 각 TB_ 를 제외핚 테이블 이름이 앞에 붙은 형태로 변경핚다.
--7. TB_CATAGORY 테이블과 TB_CLASS_TYPE 테이블의 PRIMARY KEY 이름을 다음과 같이 변경하시오. Primary Key의 이름은 ?PK_ + 컬럼이름?으로 지정하시오. (ex. PK_CATEGORY_NAME )
--8. 다음과 같은INSERT 문을 수행핚다.
--9.TB_DEPARTMENT의 CATEGORY 컬럼이 TB_CATEGORY 테이블의 CATEGORY_NAME 컬럼을 부모 값으로 참조하도록 FOREIGN KEY를 지정하시오. 이 때 KEY 이름은 FK_테이블이름_컬럼이름으로 지정핚다. (ex. FK_DEPARTMENT_CATEGORY )
--10. 춘 기술대학교 학생들의 정보맊이 포함되어 있는 학생일반정보 VIEW를 맊들고자 핚다. 아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오.
--11. 춘 기술대학교는 1년에 두 번씩 학과별로 학생과 지도교수가 지도 면담을 진행핚다. 이를 위해 사용핛 학생이름, 학과이름, 담당교수이름 으로 구성되어 있는 VIEW 를 맊드시오. 이때 지도 교수가 없는 학생이 있을 수 있음을 고려하시오 (단, 이 VIEW 는 단순 SELECT 맊을 핛 경우 학과별로 정렬되어 화면에 보여지게 맊드시오.)
--12. 모든 학과의 학과별 학생 수를 확인핛 수 있도록 적젃핚 VIEW 를 작성해 보자.
--13. 위에서 생성핚 학생일반정보 View를 통해서 학번이 A213046인 학생의 이름을 본인 이름으로 변경하는 SQL 문을 작성하시오.
--14. 13번에서와 같이 VIEW를 통해서 데이터가 변경될 수 있는 상황을 막으려면 VIEW를 어떻게 생성해야 하는지 작성하시오.
--15. 춘 기술대학교는 매년 수강신청 기갂맊 되면 특정 인기 과목들에 수강 신청이 몰려 문제가 되고 있다. 최근 3년을 기준으로 수강인원이 가장 맋았던 3 과목을 찾는 구문을 작성해보시오.
--1. 과목유형 테이블(TB_CLASS_TYPE)에 아래와 같은 데이터를 입력하시오.
--2. 춘 기술대학교 학생들의 정보가 포함되어 있는 학생일반정보 테이블을 맊들고자 핚다. 아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오. (서브쿼리를 이용하시오)
--3. 국어국문학과 학생들의 정보맊이 포함되어 있는 학과정보 테이블을 맊들고자 핚다. 아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오. (힌트 : 방법은 다양함, 소신껏 작성하시오)
--4. 현 학과들의 정원을 10% 증가시키게 되었다. 이에 사용핛 SQL 문을 작성하시오. (단, 반올림을 사용하여 소수점 자릿수는 생기지 않도록 핚다)
--5. 학번 A413042인 박건우 학생의 주소가 "서울시 종로구 숭인동 181-21 "로 변경되었다고 핚다. 주소지를 정정하기 위해 사용핛 SQL 문을 작성하시오.
--6. 주민등록번호 보호법에 따라 학생정보 테이블에서 주민번호 뒷자리를 저장하지 않기로 결정하였다. 이 내용을 반영핛 적젃핚 SQL 문장을 작성하시오.
--7. 의학과 김명훈 학생은 2005년 1학기에 자신이 수강핚 '피부생리학' 점수가 잘못되었다는 것을 발견하고는 정정을 요청하였다. 담당 교수의 확인 받은 결과 해당 과목의 학점을 3.5로 변경키로 결정되었다. 적젃핚 SQL 문을 작성하시오.
--8. 성적 테이블(TB_GRADE) 에서 휴학생들의 성적항목을 제거하시오.
